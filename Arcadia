sudo apt update
sudo apt install postgresql postgresql-contrib
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Application Web</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <header>
        <h1>Bienvenue à notre application</h1>
    </header>
    <main>
        <!-- Contenu principal -->
    </main>
    <footer>
        <!-- Pied de page -->
    </footer>
</body>
</html>
body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

header, footer {
    background-color: #333;
    color: white;
    text-align: center;
    padding: 1rem;
}

main {
    padding: 2rem;
}
npx create-react-app mon-projet
cd mon-projet
npm start
import React from 'react';

function App() {
  return (
    <div>
      <header>
        <h1>Bienvenue à notre application</h1>
      </header>
      <main>
        <p>Ceci est une application React.</p>
      </main>
      <footer>
        <p>Pied de page</p>
      </footer>
    </div>
  );
}

export default App;
sudo apt update
sudo apt install postgresql postgresql-contrib
sudo -i -u postgres
psql
CREATE DATABASE mon_projet;
CREATE USER mon_utilisateur WITH ENCRYPTED PASSWORD 'mon_mot_de_passe';
GRANT ALL PRIVILEGES ON DATABASE mon_projet TO mon_utilisateur;
\q
exit
npm install pg
const { Pool } = require('pg');

const pool = new Pool({
  user: 'mon_utilisateur',
  host: 'localhost',
  database: 'mon_projet',
  password: 'mon_mot_de_passe',
  port: 5432,
});

module.exports = pool;
const pool = require('./db');

async function getUsers() {
  const res = await pool.query('SELECT * FROM users');
  return res.rows;
}

module.exports = { getUsers };
npm install mongoose
const mongoose = require('mongoose');

mongoose.connect('mongodb://localhost:27017/mon_projet', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

const db = mongoose.connection;
db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', () => {
  console.log('Connected to MongoDB');
});

module.exports = db;
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  name: String,
  email: String,
  password: String,
});

const User = mongoose.model('User', userSchema);

async function getUsers() {
  return await User.find({});
}

module.exports = { getUsers, User };
const express = require('express');
const app = express();
const port = 3000;

app.use(express.json());

app.get('/', (req, res) => {
  res.send('Hello World!');
});

app.listen(port, () => {
  console.log(`Server running on http://localhost:${port}`);
});
const express = require('express');
const { getUsers } = require('./db'); // Utiliser le module de données SQL ou NoSQL
const app = express();
const port = 3000;

app.use(express.json());

app.get('/users', async (req, res) => {
  try {
    const users = await getUsers();
    res.json(users);
  } catch (error) {
    res.status(500).send('Server Error');
  }
});

app.listen(port, () => {
  console.log(`Server running on http://localhost:${port}`);
});
curl https://cli-assets.heroku.com/install.sh | sh
echo "web: node index.js" > Procfile
git init
git add .
git commit -m "Initial commit"
heroku create
git push heroku master
heroku open
heroku config:set NODE_ENV=production
heroku config:set DATABASE_URL=postgres://mon_utilisateur:mon_mot_de_passe@localhost:5432/mon_projet
npm start
heroku create
git push heroku master
heroku open
mkdir zoo-arcadia
cd zoo-arcadia
npm init -y
npm install express sequelize pg pg-hstore mongoose bcryptjs jsonwebtoken dotenv cors
const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const db = require('./models');
const app = express();

require('dotenv').config();

app.use(cors());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

db.sequelize.sync();

app.get('/', (req, res) => {
  res.json({ message: 'Welcome to Arcadia Zoo API' });
});

require('./routes/auth.routes')(app);
require('./routes/user.routes')(app);
require('./routes/habitat.routes')(app);
require('./routes/animal.routes')(app);
require('./routes/report.routes')(app);

const PORT = process.env.PORT || 8080;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}.`);
});
module.exports = (sequelize, Sequelize) => {
  const User = sequelize.define('user', {
    email: {
      type: Sequelize.STRING,
      unique: true,
      allowNull: false
    },
    password: {
      type: Sequelize.STRING,
      allowNull: false
    },
    role: {
      type: Sequelize.ENUM('admin', 'employee', 'vet'),
      allowNull: false
    }
  });
  return User;
};
module.exports = (sequelize, Sequelize) => {
  const Habitat = sequelize.define('habitat', {
    name: {
      type: Sequelize.STRING,
      allowNull: false
    },
    description: {
      type: Sequelize.TEXT,
      allowNull: false
    },
    images: {
      type: Sequelize.ARRAY(Sequelize.STRING),
      allowNull: false
    }
  });
  return Habitat;
};
module.exports = (sequelize, Sequelize) => {
  const Animal = sequelize.define('animal', {
    name: {
      type: Sequelize.STRING,
      allowNull: false
    },
    species: {
      type: Sequelize.STRING,
      allowNull: false
    },
    images: {
      type: Sequelize.ARRAY(Sequelize.STRING),
      allowNull: false
    },
    habitatId: {
      type: Sequelize.INTEGER,
      references: {
        model: 'habitats',
        key: 'id'
      }
    }
  });
  return Animal;
};
module.exports = (sequelize, Sequelize) => {
  const Report = sequelize.define('report', {
    animalId: {
      type: Sequelize.INTEGER,
      references: {
        model: 'animals',
        key: 'id'
      }
    },
    healthStatus: {
      type: Sequelize.STRING,
      allowNull: false
    },
    food: {
      type: Sequelize.STRING,
      allowNull: false
    },
    quantity: {
      type: Sequelize.FLOAT,
      allowNull: false
    },
    date: {
      type: Sequelize.DATE,
      allowNull: false
    },
    details: {
      type: Sequelize.TEXT
    }
  });
  return Report;
};
const Sequelize = require('sequelize');
const sequelize = new Sequelize(process.env.DB_NAME, process.env.DB_USER, process.env.DB_PASSWORD, {
  host: process.env.DB_HOST,
  dialect: 'postgres'
});

const db = {};
db.Sequelize = Sequelize;
db.sequelize = sequelize;

db.user = require('./user.model.js')(sequelize, Sequelize);
db.habitat = require('./habitat.model.js')(sequelize, Sequelize);
db.animal = require('./animal.model.js')(sequelize, Sequelize);
db.report = require('./report.model.js')(sequelize, Sequelize);

db.habitat.hasMany(db.animal, { as: 'animals' });
db.animal.belongsTo(db.habitat, { foreignKey: 'habitatId', as: 'habitat' });

db.animal.hasMany(db.report, { as: 'reports' });
db.report.belongsTo(db.animal, { foreignKey: 'animalId', as: 'animal' });

module.exports = db;
import React from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import Home from './components/Home';
import Menu from './components/Menu';
import Services from './components/Services';
import Habitats from './components/Habitats';
import Contact from './components/Contact';
import Login from './components/Login';

function App() {
  return (
    <Router>
      <Menu />
      <Switch>
        <Route path="/" exact component={Home} />
        <Route path="/services" component={Services} />
        <Route path="/habitats" component={Habitats} />
        <Route path="/contact" component={Contact} />
        <Route path="/login" component={Login} />
      </Switch>
    </Router>
  );
}

export default App;
import React from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import Home from './components/Home';
import Menu from './components/Menu';
import Services from './components/Services';
import Habitats from './components/Habitats';
import Contact from './components/Contact';
import Login from './components/Login';

function App() {
  return (
    <Router>
      <Menu />
      <Switch>
        <Route path="/" exact component={Home} />
        <Route path="/services" component={Services} />
        <Route path="/habitats" component={Habitats} />
        <Route path="/contact" component={Contact} />
        <Route path="/login" component={Login} />
      </Switch>
    </Router>
  );
}

export default App;
import React from 'react';
import { Link } from 'react-router-dom';

function Menu() {
  return (
    <nav>
      <ul>
        <li><Link to="/">Accueil</Link></li>
        <li><Link to="/services">Services</Link></li>
        <li><Link to="/habitats">Habitats</Link></li>
        <li><Link to="/contact">Contact</Link></li>
        <li><Link to="/login">Connexion</Link></li>
      </ul>
    </nav>
  );
}

export default Menu;
heroku create zoo-arcadia
heroku config:set DB_NAME=your_db_name
heroku config:set DB_USER=your_db_user
heroku config:set DB_PASSWORD=your_db_password
heroku config:set DB_HOST=your_db_host
heroku config:set JWT_SECRET=your_jwt_secret
heroku run sequelize db:migrate
